<키슬리 2000 메뉴얼 정리>

1. RS-232 인터페이스를 사용하기 위해서는 SCPI 프로그래밍만 지원한다.
2. 현재 baudrate: 9600이다.
3. Tx term: CR
4. Flow: None
5. 8데이터 비트, 1 stop비트, 패리티 비트는 없다
6. ^C, ^X를 통해 작업을 중지시킬 수 있다.
7. 핸드셰이킹에 관해 구글링을 해야될 것 같다.
8. 파이썬의 pyserial 사용, 명령(Command)을 넣어줄 때 aaa = ':FETCh?\r\n' (여기서 FETCh?는 트리거 없이 최신 판독?을 요청하는 명령어이다.)

9. 구해야 할 것: UART COM, Range, Sampling Rate, Duration, Graph, Save, Load, 

10. 명령문 정리: CONFigure: 현재 멀티미터 디스플레이 모습 비춰줌

11. pyvisa를 통한 장비명: 'ASRL5::INSTR'

12. 대괄호([ ])는 선택적 문자 집합을 나타내는 데 사용됩니다. 이러한 선택적 문자는 프로그램 메시지에 포함될 필요가 없습니다. 프로그램 메시지에 대괄호를 사용하지 마십시오.

13. 매개변수 유형을 나타내기 위해 꺾쇠괄호(< )를 사용합니다. 프로그램 메시지에 꺾쇠괄호를 사용하지 마십시오.

14. Boolean 매개변수(<b)는 계측기 작업을 활성화하거나 비활성화하는 데 사용됩니다. 1 또는 ON을 선택하면 작업이 활성화되고 0 또는 OFF를 선택하면 작업이 비활성화됩니다.

15. 대문자는 각 명령어에 대한 단축형 버전을 나타냅니다.


16. 기본 매개변수 - 나열된 매개변수는 *RST와 다음과 같습니다.시스템 - 시스템:달리 명시되지 않은 경우 PRESet 기본값. 매개변수 메모는 각 표 끝에 있습니다.

17. SCPI - 확인 표시())는 명령과 해당 파라미터가 SCPI가 확인되었음을 나타냅니다. 표시되지 않은 명령은 SCPI가 아님을 나타냅니다. 하나 이상의 비 SCPI 파라미터를 사용하는 SCPI 확인 명령은 참고 사항을 통해 설명됩니다.

rstrip([chars]) : 인자로 전달된 문자를 String의 오른쪽에서 제거합니다.

==============================================================
커맨드 종류 설명
-Calculate1: 이 명령은 MXB(다항식) 및 백분율 산술 계산을 구성하고 제어하는 데 사용됩니다. 수학 계산에 대한 자세한 정보는 섹션 2에 나와 있습니다.

-Calculate2: 이 명령은 버퍼에 저장된 판독치에 대한 CALC2 작동을 구성하고 제어하는 데 사용됩니다.

-Calculate3: 이 명령은 CALC3 한계 테스트를 구성하고 제어하는 데 사용됩니다.

-Display:이 하위 시스템의 명령은 2000 모델의 디스플레이를 제어하는 데 사용되며 표 5-3에 요약되어 있습니다.

-Format: 이 하위 시스템의 명령은 버스를 통해 계측기 판독치를 전송하는 데이터 형식을 선택하는 데 사용됩니다. BORDer 명령과 DATA 명령은 버퍼에서 전송된 판독치에만 영향을 미칩니다(즉, SENSE:DATA? 또는 CALC:DATA?는 항상 ASCII로 전송됩니다). 이러한 명령은 표 5-4에 요약되어 있습니다.

-Route: 이 하위 시스템의 명령은 스위칭을 구성하고 제어하는 데 사용되며 표 5-5에 요약되어 있습니다.

-Sense1: 감지 1 하위 시스템은 2000 모델의 측정 기능을 구성하고 제어하는 데 사용됩니다. 함수는 다양한 구성을 프로그래밍하기 전에 선택할 필요가 없습니다. 기능은 프로그래밍된 후 언제든지 선택할 수 있습니다. 프로그래밍된 기능을 선택할 때마다 프로그래밍된 상태를 가정합니다.

-각 읽기 변환의 데이터 문자열 앞에는 ASCII # 기호와 0에 해당하는 이진수 2바이트 헤더가 나옵니다.

SCPI: 테스트 및 측정 계측기용으로 설계된 ASCII 기반 계측기 명령 언어

<명령어 정리>

abort: 중단하다
:CONF:CURR:DC를 하니 측정 준비를 하는건지 모두 -----가 되었다. 다른 상태는 모두 차단되는거 같다.
configure: 설정하다
:SENS:DATA? = 현재 가장 마지막에 측정한 값을 반환합니다.
:SENS:FUNC "volt" == FUNC은 기능을 전환하는 기능이다. 바꾸고자 하는 기능은 ""안에 넣어주면 된다.


auto는 Range 자동여부를 결정한다.


시나리오: 시작버튼 사용여부 결정-> DCV/DCI중 선택 -> Range선택-> 샘플링 간격선택 -> apply입력 ->
재생 버튼 활성화->정지여부 결정 -> apply 입력 -> 재생버튼 활성화 -> 그래프 출력

Range 설정까지 완료 남은건 그래프 띄우는 것과 Sampling Rate 손보는 것.

SpinBox 반환: .value(): 현재 SpinBox에 있는 값을 반환한다.


해야될 것(8.12기준)

-그래프 위젯에 옮겨넣기
-마이크로 세컨드 파이썬에서 어떻게 구하는지 확인
-Simpling Rate 구현하기


명령어 정리: 
OPC: Operation complete command

DCI: DC전류
DCV: DC전압

Sampling Rate: 시간적으로 얼마만큼의 간격으로 데이터를 가져올지를 정하는 기준이다.



<<8.13현재 남은 부분>>
Sampling Rate 구현
Stop Duration 구현
csv load, save 구현



Timer?
Sampling Rate가 작을 수록 그래프의 형태 변환이 커진다.

TRACe == DATA(현재 200쪽 보고 있었음)

예상수치값: 3V
h
DC의 그래프 형태는 직선형태

디스플레이의 별표: Reading being stored.
버퍼데이터에 한글자씩 들어가는 듯????


현재 남은 것: 
simpling rate, csv import, 

기본rate: 1PLC(medium)
빠른rate: 0.1PLC
느린rate: 10 PLC

DEF
MIN
MAX

Sampling rate: 초당 샘플의 빈도수 => 초당에서 다른 무언가로 바꾸는게 목적

현재 남은 것: csv import, sampling rate, csv 저장하기 수정, com포트 ui다듬기
sampling rate는 rate로 해결하면 될 것으로 보임.
sampling rate 해결방안: ':SENS:VOLT:DC:NPLC 1\r\n' 1에 값에 원하는 값을 넣으면 됨.

1PLC == 16.67msec(60Hz)
1PLC == 20msec(50Hz,400Hz)


주파수를 알아야함(필요없음, 그냥 코드 내 timer를 이용해서 시간으로 나누면 됨)

timedelta객체


8.19 Sampling rate 완료
PLC: Power Line Cycles
